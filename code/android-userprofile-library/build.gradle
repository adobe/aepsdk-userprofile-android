plugins {
    id 'com.android.library'
    id "jacoco"
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 19
        targetSdk 31

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles "consumer-rules.pro"
    }

    flavorDimensions "target"

    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
    }
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task codeCoverageReport(type: JacocoReport, dependsOn: ['testPhoneDebugUnitTest', 'createPhoneDebugCoverageReport']) {
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.phone.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.main.java.sourceFiles)
    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/phoneDebugUnitTest/*.exec",
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task unitTestsCoverageReport(type: JacocoReport, dependsOn: "testPhoneDebugUnitTest") {
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.phone.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.main.java.sourceFiles)
    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/phoneDebugUnitTest/*.exec"
    ])
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task functionalTestsCoverageReport(type: JacocoReport, dependsOn: "createPhoneDebugCoverageReport") {
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.phone.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.main.java.sourceFiles)
    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

android.libraryVariants.all { variant ->
    tasks.withType(Javadoc) {
        source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        doFirst { classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) }

        exclude "**/BuildConfig.java"
        exclude "**/R.java"
        options {
            links "https://developer.android.com/reference"
        }
    }
}
task javadoc(type: Javadoc) {
    failOnError false
    options.memberLevel = JavadocMemberLevel.PUBLIC
}


dependencies {
    //noinspection GradleDependency
    implementation 'androidx.appcompat:appcompat:1.4.2'
//    implementation 'com.adobe.marketing.mobile:core:2.0.0'
    implementation 'com.github.adobe.aepsdk-core-android:core:v2.0.0-alpha.1'


    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:4.5.1"
    testImplementation 'org.mockito:mockito-inline:4.5.1'
    testImplementation 'org.json:json:20180813'
    testImplementation fileTree(include: ['*.aar'], dir: 'libs')
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//    androidTestImplementation fileTree(include: ['*.aar'], dir: 'libs')
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

}

