apply plugin: 'maven-publish'
apply plugin: 'signing'

android.libraryVariants.all { variant ->
    tasks.withType(Javadoc) {
        source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        doFirst { classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) }

        exclude "**/BuildConfig.java"
        exclude "**/R.java"
        options {
            links "https://developer.android.com/reference"
        }
    }
}

task javadoc(type: Javadoc) {
    failOnError false
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocPublish(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

publish.dependsOn('assemblePhone')

def isJitPackBuild() {
    return hasProperty('jitpack')
}

def groupIdForPublish = isJitPackBuild()? 'com.github.adobe.aepsdk-userprofile-android': 'com.adobe.marketing.mobile'

def isReleaseBuild() {
    return hasProperty('release')
}

version = isReleaseBuild() ? rootProject.moduleVersion : rootProject.moduleVersion+"-SNAPSHOT"

publishing {
    publications {
        release(MavenPublication) {
            groupId = groupIdForPublish
            artifactId = rootProject.moduleName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.moduleAARName}")
            artifact javadocPublish

            pom {
                name = mavenRepoName
                description = mavenRepoDescription
                url = 'https://developer.adobe.com/client-sdks'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//adobe/aepsdk-userprofile-android.git'
                    developerConnection = 'scm:git:ssh://github.com//adobe/aepsdk-userprofile-android.git'
                    url = 'https://github.com/adobe/aepsdk-userprofile-android'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def coreDependencyNode = dependenciesNode.appendNode('dependency')
                    coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    coreDependencyNode.appendNode('artifactId', 'core')
                    coreDependencyNode.appendNode('version', mavenCoreVersion)
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

ext."signing.gnupg.executable"="gpg"
ext."signing.gnupg.keyName"=System.getenv("GPG_KEY_ID")
ext."signing.gnupg.passphrase"=System.getenv("GPG_PASSPHRASE")

signing {
    useGpgCmd()
    required {
        tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}
