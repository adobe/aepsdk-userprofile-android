# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@2.1.2

jobs:

  unit-test:
    
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1

    steps:
      # Checkout the code as the first step.
      - checkout
      - android/create-avd:
          avd-name: myavd
          install: true
          system-image: system-images;android-29;default;x86
      - android/start-emulator:
          avd-name: myavd
          no-window: true
          post-emulator-launch-assemble-command: ""
          restore-gradle-cache-prefix: v1a
      - run:
          name: unit test
          command: |
            make unit-test
      - run:
          name: code coverage
          command: |
            make unit-test-coverage
      - run:
          name: Upload Code Coverage Report
          command: |
            curl -s https://codecov.io/bash > codecov;
            VERSION=$(grep 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2);
            SHAVERSION=$(shasum -v);
            echo "Using CodeCov version '$VERSION'"
            echo "Using shasum '$SHAVERSION'"
            for i in 1 256 512
            do
              shasum -a $i -c --ignore-missing <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM") ||
              shasum -a $i -c <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM" | grep -w "codecov")
            done
            bash ./codecov -v -X s3 -c -D "./code/android-userprofile-library/build/reports/jacoco/unitTestsCoverageReport" -F full-tests
      - android/save-gradle-cache:
          cache-prefix: v1a
  functional-test:
    
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1

    steps:
      # Checkout the code as the first step.
      - checkout
      - android/create-avd:
          avd-name: myavd
          install: true
          system-image: system-images;android-29;default;x86
      - android/start-emulator:
          avd-name: myavd
          no-window: true
          post-emulator-launch-assemble-command: ""
          restore-gradle-cache-prefix: v1a
      - run:
          name: functional test
          command: |
            make functional-test
      - run:
          name: code coverage
          command: |
            make functional-test-coverage
      - run:
          name: Upload Code Coverage Report
          command: |
            curl -s https://codecov.io/bash > codecov;
            VERSION=$(grep 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2);
            SHAVERSION=$(shasum -v);
            echo "Using CodeCov version '$VERSION'"
            echo "Using shasum '$SHAVERSION'"
            for i in 1 256 512
            do
              shasum -a $i -c --ignore-missing <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM") ||
              shasum -a $i -c <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM" | grep -w "codecov")
            done
            bash ./codecov -v -X s3 -c -D "./code/android-userprofile-library/build/reports/coverage/androidTest/phone/debug" -F full-tests
      - android/save-gradle-cache:
          cache-prefix: v1a

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-it: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - unit-test
      - functional-test
